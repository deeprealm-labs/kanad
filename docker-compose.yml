# ============================================================================
# Docker Compose - Development & Testing Environment
# ============================================================================
# Services: API, PostgreSQL, Frontend (optional)
# Usage: docker-compose up -d
# ============================================================================

version: '3.8'

services:
  # ---------------------------------------------------------------------------
  # PostgreSQL Database
  # ---------------------------------------------------------------------------
  postgres:
    image: postgres:15-alpine
    container_name: kanad-postgres
    environment:
      POSTGRES_USER: kanad_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-kanad_dev_password}
      POSTGRES_DB: kanad_db
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U kanad_user -d kanad_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - kanad-network
    restart: unless-stopped

  # ---------------------------------------------------------------------------
  # Kanad API Backend
  # ---------------------------------------------------------------------------
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: kanad-api
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      # Database
      DATABASE_URL: postgresql://kanad_user:${POSTGRES_PASSWORD:-kanad_dev_password}@postgres:5432/kanad_db

      # API Configuration
      API_VERSION: "0.1.0"
      ENVIRONMENT: ${ENVIRONMENT:-development}
      DEBUG: ${DEBUG:-false}

      # Security
      SECRET_KEY: ${SECRET_KEY:-dev-secret-key-change-in-production}
      ACCESS_TOKEN_EXPIRE_MINUTES: 60
      REFRESH_TOKEN_EXPIRE_DAYS: 7

      # CORS
      CORS_ORIGINS: ${CORS_ORIGINS:-http://localhost:3000,https://your-frontend.vercel.app}

      # OAuth (Google)
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      GOOGLE_REDIRECT_URI: ${GOOGLE_REDIRECT_URI:-http://localhost:3000/auth/callback/google}

      # Email
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
      SMTP_FROM: ${SMTP_FROM:-noreply@kanad.app}

      # Admin
      ADMIN_PASSWORD: ${ADMIN_PASSWORD}

      # IBM Quantum (optional)
      IBM_QUANTUM_TOKEN: ${IBM_QUANTUM_TOKEN}

      # BlueQubit (optional)
      BLUEQUBIT_API_KEY: ${BLUEQUBIT_API_KEY}

    volumes:
      # Mount SQLite database directory
      - ./api:/app/api
      - sqlite_data:/app/data
      - ./logs:/app/logs

    ports:
      - "8000:8000"

    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/api/health', timeout=5)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

    networks:
      - kanad-network

    restart: unless-stopped

  # ---------------------------------------------------------------------------
  # Frontend (Next.js) - Optional for full-stack local development
  # ---------------------------------------------------------------------------
  # Uncomment to run frontend in Docker
  # frontend:
  #   build:
  #     context: ./web
  #     dockerfile: Dockerfile
  #   container_name: kanad-frontend
  #   depends_on:
  #     - api
  #   environment:
  #     NEXT_PUBLIC_API_URL: http://localhost:8000
  #   ports:
  #     - "3000:3000"
  #   networks:
  #     - kanad-network
  #   restart: unless-stopped

# =============================================================================
# Volumes
# =============================================================================
volumes:
  postgres_data:
    driver: local
  sqlite_data:
    driver: local

# =============================================================================
# Networks
# =============================================================================
networks:
  kanad-network:
    driver: bridge
