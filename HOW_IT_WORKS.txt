╔════════════════════════════════════════════════════════════════════════╗
║                    KANAD WEB + API ARCHITECTURE                        ║
╚════════════════════════════════════════════════════════════════════════╝

                         YOUR BROWSER
                    http://localhost:8000
                             │
                             ▼
        ┌────────────────────────────────────────────┐
        │         WEB INTERFACE (Static)             │
        │  ┌──────────────────────────────────────┐  │
        │  │  index.html - UI Layout              │  │
        │  │  styles.css - Purple Gradient Design │  │
        │  │  app.js     - API Calls & Logic      │  │
        │  └──────────────────────────────────────┘  │
        │                                            │
        │  Features:                                 │
        │  • Preset buttons (H2, LiH, H2O, Na2)     │
        │  • Atom builder (add/remove atoms)        │
        │  • Solver selector (HF/VQE/QPE/SQD)       │
        │  • Optimization toggle                    │
        │  • Real-time results display              │
        └────────────────────────────────────────────┘
                             │
                             │ HTTP POST/GET
                             │ /api/compute
                             │ /api/presets
                             ▼
        ┌────────────────────────────────────────────┐
        │       FASTAPI SERVER (api/server.py)       │
        │  ┌──────────────────────────────────────┐  │
        │  │  Route: POST /api/compute            │  │
        │  │  → Creates atoms, bond, Hamiltonian  │  │
        │  │  → Runs VQE/QPE/SQD solver          │  │
        │  │  → Applies optimization (if enabled) │  │
        │  │  → Returns energy + stats            │  │
        │  └──────────────────────────────────────┘  │
        │  ┌──────────────────────────────────────┐  │
        │  │  Route: GET /api/presets             │  │
        │  │  → Returns H2, LiH, H2O, Na2         │  │
        │  └──────────────────────────────────────┘  │
        │  ┌──────────────────────────────────────┐  │
        │  │  Route: GET /                        │  │
        │  │  → Serves static files from web/     │  │
        │  └──────────────────────────────────────┘  │
        └────────────────────────────────────────────┘
                             │
                             │ Python imports
                             ▼
        ┌────────────────────────────────────────────┐
        │      KANAD FRAMEWORK (kanad/)              │
        │  ┌──────────────────────────────────────┐  │
        │  │  Core:                               │  │
        │  │  • Atom, Bond, Hamiltonian           │  │
        │  │  • Covalent/Ionic/Metallic bonds     │  │
        │  └──────────────────────────────────────┘  │
        │  ┌──────────────────────────────────────┐  │
        │  │  Solvers:                            │  │
        │  │  • VQE (Variational)                 │  │
        │  │  • QPE (Phase Estimation)            │  │
        │  │  • SQD (Sampling)                    │  │
        │  │  • HF (Hartree-Fock)                 │  │
        │  └──────────────────────────────────────┘  │
        │  ┌──────────────────────────────────────┐  │
        │  │  Optimization:                       │  │
        │  │  • Active space selection            │  │
        │  │  • Qubit tapering                    │  │
        │  │  • Circuit optimization              │  │
        │  │  • 3 strategies (aggressive/balanced)│  │
        │  └──────────────────────────────────────┘  │
        └────────────────────────────────────────────┘
                             │
                             │ Qiskit calls
                             ▼
        ┌────────────────────────────────────────────┐
        │         QUANTUM SIMULATION                 │
        │  • Qiskit Aer (quantum simulator)          │
        │  • NumPy/SciPy (linear algebra)            │
        │  • PySCF (quantum chemistry integrals)     │
        └────────────────────────────────────────────┘


═══════════════════════════════════════════════════════════════════════

                        EXAMPLE: H2 COMPUTATION

1. USER CLICKS "H₂" PRESET
   └─> JavaScript loads: H at [0,0,0] and H at [0.74,0,0]

2. USER CLICKS "COMPUTE ENERGY"
   └─> app.js → POST /api/compute with atoms data

3. FASTAPI RECEIVES REQUEST
   └─> Creates: Atom('H'), Atom('H') → CovalentBond

4. CREATES HAMILTONIAN
   └─> CovalentHamiltonian computes h_core, eri, etc.

5. RUNS VQE SOLVER
   └─> UCCAnsatz + JordanWignerMapper → 4 qubits

6. APPLIES OPTIMIZATION (if enabled)
   └─> QuantumOptimizer: 4 qubits → 3 qubits (1.3x speedup)

7. QUANTUM SIMULATION
   └─> Qiskit optimizes parameters → Energy = -1.527 eV

8. RETURNS JSON RESPONSE
   └─> {
       "success": true,
       "result": {"energy": -1.527, "method": "VQE"},
       "system": {"qubits": 4, "electrons": 2},
       "optimization": {"speedup": 1.3}
   }

9. WEB UI DISPLAYS RESULTS
   └─> Shows energy in big green text
   └─> Shows qubit reduction: 4 → 3
   └─> Shows 1.3x speedup badge

Total time: ~0.1 seconds ⚡

═══════════════════════════════════════════════════════════════════════

                           FILE LOCATIONS

web/index.html         → Main web page (UI layout)
web/styles.css         → Styling (purple gradient, cards)
web/app.js             → JavaScript (API calls, event handlers)

api/server.py          → FastAPI server (routes, endpoints)
api/__init__.py        → Package init

kanad/core/            → Atoms, bonds, Hamiltonians
kanad/solvers/         → VQE, QPE, SQD solvers
kanad/optimization/    → Quantum optimization module
kanad/ansatze/         → Quantum circuits (UCC)

run_server.sh          → Quick start script

═══════════════════════════════════════════════════════════════════════

                            QUICK START

    ./run_server.sh

    → Open http://localhost:8000
    → Click "H₂"
    → Click "Compute Energy"
    → See results! 🎉

═══════════════════════════════════════════════════════════════════════
