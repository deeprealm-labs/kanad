# Kanad Platform - Environment Configuration
# Copy this file to .env and fill in your values

# ============================================================================
# DATABASE CONFIGURATION
# ============================================================================

# PostgreSQL Database URL (for production)
# Format: postgresql://username:password@host:port/database
DATABASE_URL=postgresql://kanadmin:YourPassword@localhost:5432/kanad_db

# SQLite Database Path (for development, will be deprecated)
DATABASE_PATH=./api/kanad_experiments.db

# ============================================================================
# JWT AUTHENTICATION
# ============================================================================

# JWT Secret Key (generate with: python -c "import secrets; print(secrets.token_urlsafe(32))")
# IMPORTANT: Keep this secret and change it in production!
JWT_SECRET_KEY=your-super-secret-jwt-key-minimum-32-characters-long-random-string

# JWT Algorithm
JWT_ALGORITHM=HS256

# Token expiration times
ACCESS_TOKEN_EXPIRE_MINUTES=60
REFRESH_TOKEN_EXPIRE_DAYS=30

# ============================================================================
# GOOGLE OAUTH (Optional)
# ============================================================================

# Get credentials from: https://console.cloud.google.com/
GOOGLE_CLIENT_ID=your-google-client-id.apps.googleusercontent.com
GOOGLE_CLIENT_SECRET=your-google-client-secret

# OAuth redirect URI (update based on your deployment)
GOOGLE_REDIRECT_URI=http://localhost:3000/auth/google/callback

# ============================================================================
# EMAIL CONFIGURATION (SMTP)
# ============================================================================

# SMTP Server settings (example uses Gmail)
SMTP_HOST=smtp.gmail.com
SMTP_PORT=587
SMTP_USER=your-email@gmail.com

# Gmail App Password (not your regular password!)
# Generate at: https://myaccount.google.com/apppasswords
SMTP_PASSWORD=your-16-character-app-password

# Email sender details
SMTP_FROM_EMAIL=noreply@kanad.com
SMTP_FROM_NAME=Kanad Platform

# ============================================================================
# APPLICATION SETTINGS
# ============================================================================

# Environment (development, staging, production)
ENVIRONMENT=development

# Debug mode (true/false)
DEBUG=true

# Server host and port
HOST=0.0.0.0
PORT=8000

# CORS allowed origins (comma-separated)
CORS_ORIGINS=http://localhost:3000,http://localhost:3001,https://kanad.vercel.app

# API Version
VERSION=0.2.0

# ============================================================================
# AZURE CONFIGURATION (Production)
# ============================================================================

# Azure Resource Group
AZURE_RESOURCE_GROUP=kanad-rg

# Azure PostgreSQL Server
AZURE_POSTGRES_SERVER=kanad-db-server.postgres.database.azure.com
AZURE_POSTGRES_USER=kanadmin
AZURE_POSTGRES_PASSWORD=YourSecurePassword123!
AZURE_POSTGRES_DATABASE=kanad_db

# Azure App Service
AZURE_APP_SERVICE_NAME=kanad-api

# ============================================================================
# QUANTUM BACKENDS (Existing)
# ============================================================================

# IBM Quantum
IBM_QUANTUM_TOKEN=your-ibm-quantum-token

# AWS Braket
AWS_ACCESS_KEY_ID=your-aws-access-key
AWS_SECRET_ACCESS_KEY=your-aws-secret-key
AWS_REGION=us-east-1

# BlueQubit
BLUEQUBIT_API_KEY=your-bluequbit-api-key

# ============================================================================
# SECURITY SETTINGS
# ============================================================================

# Access key requirement (true/false)
REQUIRE_ACCESS_KEY=true

# Maximum login attempts before lockout
MAX_LOGIN_ATTEMPTS=5

# Password requirements
MIN_PASSWORD_LENGTH=8
REQUIRE_PASSWORD_UPPERCASE=true
REQUIRE_PASSWORD_LOWERCASE=true
REQUIRE_PASSWORD_DIGIT=true
REQUIRE_PASSWORD_SPECIAL=true

# Session settings
SESSION_TIMEOUT_MINUTES=60
MAX_SESSIONS_PER_USER=5

# ============================================================================
# MONITORING & LOGGING (Optional)
# ============================================================================

# Log level (DEBUG, INFO, WARNING, ERROR, CRITICAL)
LOG_LEVEL=INFO

# Sentry DSN (for error tracking)
SENTRY_DSN=

# Application Insights (Azure)
APPINSIGHTS_INSTRUMENTATION_KEY=

# ============================================================================
# FEATURE FLAGS (Optional)
# ============================================================================

# Enable/disable features
ENABLE_GOOGLE_AUTH=true
ENABLE_EMAIL_VERIFICATION=true
ENABLE_ACCESS_KEYS=true
ENABLE_ADMIN_DASHBOARD=true

# ============================================================================
# RATE LIMITING (Optional)
# ============================================================================

# Requests per minute
RATE_LIMIT_PER_MINUTE=60

# Auth endpoints rate limit
AUTH_RATE_LIMIT_PER_MINUTE=10

# ============================================================================
# NOTES
# ============================================================================

# 1. Never commit this file with real credentials to version control
# 2. Use strong, unique passwords for all services
# 3. Rotate JWT_SECRET_KEY every 90 days in production
# 4. Keep SMTP_PASSWORD secure (use app-specific passwords)
# 5. Update GOOGLE_REDIRECT_URI to match your domain
# 6. Set DEBUG=false in production
# 7. Use environment variables in Azure App Service settings
# 8. Test with staging environment before deploying to production

# ============================================================================
# QUICK SETUP GUIDE
# ============================================================================

# 1. Copy this file:
#    cp .env.example .env

# 2. Generate JWT secret:
#    python -c "import secrets; print(secrets.token_urlsafe(32))"

# 3. Setup Google OAuth (optional):
#    https://console.cloud.google.com/ → Create OAuth credentials

# 4. Setup Gmail SMTP:
#    Gmail → Security → 2FA → App Passwords → Generate

# 5. Setup PostgreSQL:
#    - Local: Install PostgreSQL and create database
#    - Azure: Use Azure Portal to create PostgreSQL Flexible Server

# 6. Run migrations:
#    python migrations/run_migrations.py migrate

# 7. Create admin user:
#    python -c "from api.core.database_postgres import *; db = SessionLocal(); create_admin_user(db, 'admin@kanad.com', 'Admin123!', 'Admin User')"

# 8. Start server:
#    uvicorn api.main:app --reload
